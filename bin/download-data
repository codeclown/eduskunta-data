#!/usr/bin/env node

const request = require('request-promise');
const getDb = require('../src/db');

const { tables } = require('../src/schema.json');

const db = getDb();

getRowCountEstimates()
  .then(estimates => Promise.all(tables.map(table => indexTable(table, estimates))))
  .catch(error => {
    if (error.meta) {
      console.error(error.meta.body);
    } else {
      console.error(error.stack);
    }
    process.exit(1);
  });

function getRowCountEstimates() {
  return request({
    method: 'GET',
    url: 'https://avoindata.eduskunta.fi/api/v1/tables/counts',
    json: true
  });
}

function indexTable(table, estimates) {
  const { tableName, indexName, primaryKey, columns } = table;
  const rowCountEstimate = estimates.find(item => item.tableName === tableName).rowCount;

  return db(tableName)
    .max(`${primaryKey}_Integer`)
    .then(results => results[0].max)
    .then(maxId => {
      const pkStartValue = maxId ? maxId + 1 : 1;

      console.error(`[${tableName}] rowCountEstimate: ${rowCountEstimate} pkStartValue: ${pkStartValue}`);

      return getData(pkStartValue, 0);
    });

  function getData(pkStartValue, requests) {
    const url = `https://avoindata.eduskunta.fi/api/v1/tables/${tableName}/batch?perPage=100&pkStartValue=${pkStartValue}&pkName=${encodeURIComponent(primaryKey)}`;
    return request({ url, json: true })
      .then(({ columnNames, hasMore, pkLastValue, rowData }) => {
        return db(tableName).insert(
          rowData.map(row => {
            const rowObject = row.reduce((obj, value, index) => {
              obj[columnNames[index]] = value;
            }, {});
            return prepareForInsert(table, rowObject);
          })
        ).then(() => {
          if (requests % 1000) {
            return db(tableName).count(primaryKey, { as: 'amount' })
              .then(results => results[0].amount)
              .then(amount => {
                console.error(`[${tableName}] indexed results: ${amount} / ${rowCountEstimate}`);
              });
          }
        }).then(() => {
          if (hasMore) {
            // Bug in this table specifically
            if (tableName === 'SeatingOfParliament' && pkLastValue === null) {
              pkLastValue = Math.max.apply(null, rowData.map(row => row[columnNames.indexOf(primaryKey)]));
            }
            return getData(parseInt(pkLastValue) + 1, requests + 1);
          }
        });
      });
  }
}
