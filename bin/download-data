#!/usr/bin/env node

const request = require('request-promise');
const getDb = require('../src/server/db');
const insertIntoDb = require('../src/server/utils/insertIntoDb');
const parseMemberPartyInformation = require('./parse-member-party-information');

const { tables } = require('../src/server/schema.json');

const useTransaction = !process.argv.includes('--no-trx');
const rowLimit = process.argv.includes('--dev') ? 10000 : Infinity;
// whitelist for now as we don't need everything
const whitelist = ['MemberOfParliament', 'SaliDBAanestys', 'SaliDBAanestysEdustaja', 'SaliDBAanestysKieli'];

(async () => {
  console.error('useTransaction:', useTransaction);
  const db = getDb();
  const wholeTrx = useTransaction ? await db.transaction() : db;
  try {
    const estimates = await getRowCountEstimates();

    console.error('Beginning to index tables');
    const tablesToIndex = tables.filter(table => whitelist.includes(table.tableName));
    await Promise.all(tablesToIndex.map(table => indexTable(wholeTrx, table, estimates)));
    console.error('Indexing tables complete');

    console.error('Running parse-member-party-information');
    await parseMemberPartyInformation(wholeTrx);

    console.error('Updating lastDataUpdate');
    await wholeTrx.raw(`
      INSERT INTO "lastDataUpdate" ("key", "lastDataUpdate")
      VALUES (?, ?)
      ON CONFLICT ("key")
      DO UPDATE SET "lastDataUpdate" = ?`, ['lastDataUpdate', new Date, new Date]);

    if (useTransaction) {
      console.error('All done, committing');
      await wholeTrx.commit();
    }

    db.destroy();
  } catch (error) {
    if (useTransaction) {
      console.error('Caught an exception, rolling back transaction');
      await wholeTrx.rollback();
    }
    if (error.meta) {
      console.error(error.meta.body);
    } else {
      console.error(error.stack);
    }
    process.exit(1);
  }
})();

function getRowCountEstimates() {
  return request({
    method: 'GET',
    url: 'https://avoindata.eduskunta.fi/api/v1/tables/counts',
    json: true
  });
}

function indexTable(db, table, estimates) {
  const { tableName, indexName, primaryKey, columns } = table;
  const rowCountEstimate = estimates.find(item => item.tableName === tableName).rowCount;
  let shouldTerminateDueToRowLimit = false;

  return db('lastBatchImportId')
    .where('tableName', tableName)
    .first('lastId')
    .then(result => {
      if (typeof result === 'undefined') {
        return db('lastBatchImportId')
          .insert({
            tableName,
            lastId: '0'
          })
          .then(() => {
            return '0';
          });
      }
      return result.lastId;
    })
    .then(lastId => {
      console.error(`[${tableName}] rowCountEstimate: ${rowCountEstimate} lastId: ${lastId}`);

      return getData(lastId, 0);
    });

  function getData(lastId, requests) {
    const url = `https://avoindata.eduskunta.fi/api/v1/tables/${tableName}/batch?` +
      `perPage=100&pkStartValue=${parseInt(lastId) + 1}&pkName=${encodeURIComponent(primaryKey)}`;
    return request({ url, json: true })
      .then(({ columnNames, hasMore, pkLastValue, rowData }) => {
        if (!rowData.length) {
          console.error(`[${tableName}] reached the end, no more results`);
          return;
        }

        if (shouldTerminateDueToRowLimit) {
          console.error(`[${tableName}] reached row limit of ${rowLimit}, stopping here`);
          return;
        }

        const rowObjects = rowData.map(row => row.reduce((obj, value, index) => {
          obj[columnNames[index]] = value;
          return obj;
        }, {}));

        // When listing reaches the end, this is null... let's manually grab the latest one
        if (pkLastValue === null) {
          pkLastValue = Math.max.apply(null, rowObjects.map(row => parseInt(row[primaryKey])));
        }
        pkLastValue = pkLastValue.toString();

        return db.transaction(trx => {
          return insertIntoDb(trx, table, rowObjects)
            .then(() => {
              if (requests % 10 === 0) {
                return trx(tableName).count(primaryKey, { as: 'amount' })
                  .then(results => results[0].amount)
                  .then(amount => {
                    console.error(`[${tableName}] indexed results: ${amount} / ${rowCountEstimate}`);
                    if (amount >= rowLimit) {
                      shouldTerminateDueToRowLimit = true;
                    }
                  });
              }
            })
            .then(() => {
              return trx('lastBatchImportId')
                .where('tableName', tableName)
                .update({
                  lastId: pkLastValue
                });
            })
        }).then(() => {
          return getData(pkLastValue, requests + 1);
        });
      });
  }
}
