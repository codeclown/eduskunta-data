#!/usr/bin/env node

const fs = require('fs');
const JSZip = require('jszip');
const path = require('path');
const sharp = require('sharp');
const request = require('request-promise');

const { tables } = require('../src/server/schema.json');

processZip('https://www.eduskunta.fi/FI/kansanedustajat/Documents/2019-2022-Edustajat-100719.zip');

async function processZip(url) {
  console.error('STARTING', url);
  const filename = url.split('/').reverse()[0];
  if (!fs.existsSync(filename)) {
    await downloadFile(url, filename);
  }
  const zip = await JSZip.loadAsync(fs.readFileSync(filename));
  for (let imageFile of Object.keys(zip.files)) {
    const idOnlyFilename = imageFile.replace(/^.*\-([0-9]+\.JPG)$/i, '$1').toLowerCase();
    const outPath = path.join('data/', idOnlyFilename);
    if (!fs.existsSync(outPath)) {
      const buffer = await zip.file(imageFile).async('nodebuffer');
      const resized = await sharp(buffer).resize(300).jpeg().toBuffer();
      fs.writeFileSync(outPath, resized);
    }
  }
  console.error('DONE    ', url);
}

function downloadFile(url, target) {
  return new Promise(resolve => {
    request(url)
      .pipe(fs.createWriteStream(target))
      .on('close', function () {
        resolve();
      });
  });
}
